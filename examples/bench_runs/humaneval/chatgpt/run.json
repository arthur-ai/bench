{"id": "3d03707b-a37d-4b34-9484-b7134b2bd11c", "name": "chatgpt", "test_suite_id": "6bd8eb2d-176a-45ad-82d6-451942358200", "test_cases": [{"id": "b530ae9c-6d2b-436a-83ac-58838151409b", "output": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i, num1 in enumerate(numbers):\n        for num2 in numbers[i+1:]:\n            if abs(num1 - num2) < threshold:\n                return True\n    return False\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a594fee1-47c4-4464-b5f4-f52d14b984a3", "output": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    balance = 0\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        current_group += char\n        \n        if balance == 0:\n            result.append(current_group.replace(' ', ''))\n            current_group = ''\n    \n    return result\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "b00165dd-a1ee-459c-8e8d-6c2eedcffe72", "output": "def truncate_number(number: float) -> float:\n    return number - int(number)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "52c0f761-34c4-46e8-a9b8-be5b4da3fff7", "output": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "c7f27e2e-1073-4bd0-9226-a1d237ef2e77", "output": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the dataset\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the sum of absolute differences from the mean\n    deviation_sum = sum(abs(x - mean) for x in numbers)\n\n    # Calculate the mean absolute deviation\n    mad = deviation_sum / len(numbers)\n\n    return mad\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "703e48be-e6d7-4938-90c9-9180ce14e918", "output": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    # Iterate through the numbers list\n    for i in range(len(numbers)):\n        # If not first element, add delimiter\n        if i > 0:\n            result.append(delimiter)\n        # Add current number\n        result.append(numbers[i])\n    return result\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "934fbcd9-25bc-4569-8fb8-d2bcaecbde81", "output": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        \n        if char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    \n    depths.append(max_depth)\n    \n    return depths\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "f094a926-1c57-4e54-9c87-0984cb877b3c", "output": "return [s for s in strings if substring in s]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "2684b797-c3b9-4391-a522-3ba5b1cb1f84", "output": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    # Initialize sum and product variables as the first element in the list\n    total_sum = numbers[0]\n    total_product = numbers[0]\n    \n    # Iterate through the rest of the list, updating the sum and product\n    for num in numbers[1:]:\n        total_sum += num\n        total_product *= num\n    \n    return (total_sum, total_product)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "5395072e-aa48-4c42-b9f7-157c1f8da728", "output": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    \n    for num in numbers:\n        # Remove elements from the left side of the window that are smaller than the current number\n        while window and window[-1] < num:\n            window.pop()\n        \n        # Add the current number to the right side of the window\n        window.append(num)\n        \n        # Add the maximum element in the window to the result\n        result.append(window[0])\n        \n        # Remove elements from the left side of the window if they are outside the window size\n        if len(window) > 1 and result[-1] == window[0]:\n            window.popleft()\n    \n    return result\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "620f732a-0075-47fc-8342-6973149837ce", "output": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if string == \"\":\n        return \"\"\n    \n    reverse = string[::-1]\n    \n    for i in range(len(string)):\n        if string[i:] == reverse[:len(reverse)-i]:\n            return string + reverse[len(reverse)-i:]\n        \n    return \"\"\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "a57a232c-9ccc-4c56-82b6-f7b378f04764", "output": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0' or a[i] == '0' and b[i] == '1':\n            result += '1'\n        else:\n            result += '0'\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "124066e8-44e8-463a-a1b3-e4c03a8e5c62", "output": "def longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a16bfcaf-fc91-465b-ab8e-3b6892fce090", "output": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "071cd66b-25a2-4e50-bab4-f195d63ab1bb", "output": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "299ea298-1fa1-416e-a278-1bb6430d551a", "output": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8985a166-0d2d-4271-85d2-58ecc319ccef", "output": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    return len(set(string.lower()))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "e5725cf2-0404-43ee-aa8b-d8c7afd95b15", "output": "def parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,   # whole note lasts four beats\n        'o|': 2,  # half note lasts two beats\n        '.|': 1   # quarter note lasts one beat\n    }\n    result = []\n    for note in music_string.split():\n        result.append(notes.get(note))\n    return result\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a0e346a6-68e3-450a-a76c-a47ab47c2f1d", "output": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "5083e0c5-5b1b-4a15-a688-5f0503a75dde", "output": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Return a string with numbers sorted from smallest to largest \"\"\"\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_dict[x])\n    return ' '.join(sorted_numbers)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "7309f671-2911-405c-8f72-7e214ba67e35", "output": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()  # Sort the list in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference to infinity\n    result = None\n    \n    for i in range(len(numbers) - 1):  # Iterate through the list\n        diff = numbers[i+1] - numbers[i]  # Calculate the difference between adjacent numbers\n        \n        if diff < min_diff:  # If the difference is smaller than the current minimum difference\n            min_diff = diff  # Update the minimum difference\n            result = (numbers[i], numbers[i+1])  # Update the result\n    \n    return result\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "17258481-222e-4f5c-b582-7df331d775ee", "output": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 1.0/4, 1.0/2, 3.0/4, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "d186b0f7-b841-4a4d-8109-37cad765f429", "output": "return [value for value in values if isinstance(value, int)]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "807c23de-6c66-4f9e-ab8d-f1ecac0ed711", "output": "return len(string)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "3c5a0469-2e1d-4b0d-8545-b315562d6b28", "output": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return None\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "97960b29-d222-44f5-8399-84e7889f923c", "output": "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "628df64d-f91a-4c15-8252-ab5e7b70128a", "output": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for number in numbers:\n        count_dict[number] = count_dict.get(number, 0) + 1\n\n    # Create a new list to store the unique numbers\n    unique_numbers = []\n    for number in numbers:\n        # Add number to unique_numbers list only if its count is 1\n        if count_dict[number] == 1:\n            unique_numbers.append(number)\n\n    return unique_numbers\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "849b60b7-60e7-4b20-9504-85cc57f852bd", "output": "def flip_case(string: str) -> str:\n    return string.swapcase()\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "272688bd-2e62-494b-b8c1-0199ed39cdb5", "output": "return ''.join(strings)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "6557bbdd-6a19-4f0b-afd2-af0e3180fe5a", "output": "return [string for string in strings if string.startswith(prefix)]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "7e126303-0df4-4e63-b778-24949386ebcb", "output": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "f5ac5f7b-9526-4dd5-8872-3237b763a078", "output": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ff7ffb16-8107-478f-9310-176a4230d9e7", "output": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        return \"Invalid input.\"\n    \n    max_coeff = max(abs(coeff) for coeff in xs)\n    n = len(xs) - 1\n    \n    x = -1\n    while x <= 1:\n        y = poly(xs, x)\n        if abs(y) < max_coeff / 10 ** (n - 1):\n            return x\n        x += 0.001\n    \n    return \"No zero point found.\"\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "9391fc11-f5fc-49f7-b587-a6aa054634e5", "output": "def sort_third(l: list):\n    sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    return [sorted_values.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "dd528537-b951-4e53-8474-a249fd1354c5", "output": "def unique(l: list):\n    \"\"\"\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "cf05058e-c31b-4848-aacd-c88d38d8128f", "output": "def max_element(l: list):\n    return max(l)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "fb11905e-3ce4-4e93-938b-b1a981ac5fe3", "output": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ee1c601a-f0f6-468b-b457-999f551dbda2", "output": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values)\n    l_prime = l.copy()\n    for i, value in zip(even_indices, sorted_even_values):\n        l_prime[i] = value\n    return l_prime\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "5cc55008-c4e9-4aed-b423-11001f4a68a5", "output": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "cbad58e1-b910-4270-ac25-0456552e8afa", "output": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    if n <= 0:\n        return None\n    if n == 1:\n        return 2\n\n    fib = [1, 2]\n    i = 2\n\n    while len(fib) < n:\n        next_num = fib[i-1] + fib[i-2]\n        if is_prime(next_num):\n            fib.append(next_num)\n        i += 1\n    \n    return fib[-1]\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "6873c9c6-ecc8-47a1-93e7-87243649d71b", "output": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "40bfdca9-da7d-489d-b65b-888f8cb376d7", "output": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Given that all cars move at the same speed, and that two cars can only collide if they are\n    # moving in opposite directions, it means that for any car moving left to right, there are only\n    # n - 1 cars moving from right to left that it can collide with. Therefore, the total number of\n    # collisions will be n * (n - 1).\n\n    return n * (n - 1)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "97f17c37-888b-4659-ae8c-94ab16c7fd65", "output": "def incr_list(l: list):\n    return [x + 1 for x in l]\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "d4dd3cf3-6c6a-424a-94ab-5cd1acb86601", "output": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) <= 1:\n        return False\n\n    num_set = set()\n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "c4d2b103-c04f-435d-a72c-52bef2d0211f", "output": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    \n    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    \n    return res\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "b2dafd49-7b9a-4242-9d2f-03dc8e68c769", "output": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "c02ef1cf-d610-4809-9a29-f23da246c66d", "output": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n <= 3:\n        return 2\n    else:\n        fib = [0] * (n+1)\n        fib[2] = 2\n        fib[3] = 0\n        for i in range(4, n+1):\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n        return fib[n]\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ef8ab107-7768-4c95-bc61-c55181cdda48", "output": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[n // 2]\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "2f91eecc-583c-461e-987d-c8df77255d17", "output": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8f7ae5a4-ba82-451f-9f11-b778cbe8f1db", "output": "def modp(n: int, p: int):\n    return pow(2, n, p)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "2a7beef6-c7c9-4e52-81e7-8e708e53cb27", "output": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ed15a58e-c95a-4b9c-afc0-569f1c9ceee0", "output": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([char for char in text if char.lower() not in vowels])\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "14288f32-c672-4517-b1e6-879fc3c31d2b", "output": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "a0f40d14-6858-46d9-94eb-da2de1ecd14b", "output": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "e459dcde-59eb-49e7-a117-07923bd1c50b", "output": "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Create character frequency counter for s0\n    counter_s0 = Counter(s0)\n    \n    # Create character frequency counter for s1\n    counter_s1 = Counter(s1)\n    \n    # Check if the character frequencies are the same for both words\n    return counter_s0 == counter_s1\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "72e35cca-578e-4faf-8f6f-73177e1c2db9", "output": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "3fe46077-7e56-44f9-809a-f72eaba574c0", "output": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ad01b8b3-246c-4799-9664-8d305b529887", "output": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "94dcf375-ac03-46e5-a32d-73cb34a21933", "output": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "b608f192-af77-4ef8-a7e3-1ac88eed6f29", "output": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    # Initialize the largest prime factor to 1\n    largest_factor = 1\n    \n    # Divide n by 2 until it is no longer divisible by 2\n    while n % 2 == 0:\n        largest_factor = 2\n        n /= 2\n    \n    # Divide n by odd numbers starting from 3 up to the square root of n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n /= i\n    \n    if n > 2:\n        largest_factor = n\n    \n    return int(largest_factor)\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "f4a2092d-faae-403a-a19c-80334af21c35", "output": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))\n\ndef sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n\nBoth of these solutions will give the same output. The first solution uses the built-in `sum` function to calculate the sum of the numbers from 1 to n by creating a range and then summing it. The second solution uses the formula for the sum of an arithmetic series, which is `n * (n + 1) / 2`.", "score": 0.0, "input": null, "reference_output": null}, {"id": "afa7a548-7efd-4653-9e2e-e40f4005c897", "output": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "47cb6d1e-c226-40b5-8a46-48fbaae8b47f", "output": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "867febbe-31e2-4407-8d19-a0c0bbc52f2f", "output": "def fibfib(n: int) -> int:\n    # Base cases\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    # Initialize variables\n    fibfib_n_minus_3 = 0\n    fibfib_n_minus_2 = 0\n    fibfib_n_minus_1 = 1\n    \n    # Calculate fibfib(n) using dynamic programming\n    for i in range(3, n+1):\n        fibfib_n = fibfib_n_minus_1 + fibfib_n_minus_2 + fibfib_n_minus_3\n        \n        # Update variables for next iteration\n        fibfib_n_minus_3 = fibfib_n_minus_2\n        fibfib_n_minus_2 = fibfib_n_minus_1\n        fibfib_n_minus_1 = fibfib_n\n    \n    return fibfib_n\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "a7d45806-28f9-40c7-91a2-5c91e22862c6", "output": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # Check if the last character is 'y' and remove it from the word\n    if s[-1] == 'y':\n        s = s[:-1]\n        # Count the vowels in the word\n    count = sum(1 for char in s.lower() if char in vowels)\n    return count\n\n# Test cases\n\n# Test case 1\ninput1 = \"abcde\"\nexpected_output1 = 2\nassert vowels_count(input1) == expected_output1\n\n# Test case 2\ninput2 = \"ACEDY\"\nexpected_output2 = 3\nassert vowels_count(input2) == expected_output2\n\n# In the original prompt, there is a request for more test cases. Here are some additional test cases:\n\n# Test case 3\ninput3 = \"aeiouy\"\nexpected_output3 = 5\nassert vowels_count(input3) == expected_output3\n\n# Test case 4\ninput4 = \"hello\"\nexpected_output4 = 2\nassert vowels_count(input4) == expected_output4\n\n# Test case 5\ninput5 = \"python\"\nexpected_output5 = 1\nassert vowels_count(input5) == expected_output5\n\n# Test case 6\ninput6 = \"abcd\"\nexpected_output6 = 1\nassert vowels_count(input6) == expected_output6\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "dffc4389-03a9-4bb5-a03c-ce6ced369f51", "output": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if shift > num_digits:\n        return x_str[::-1]\n    \n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "0b164e77-d944-496d-a4c8-6f83f50f0af8", "output": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "89e6f55a-2fb0-4331-90ef-a4730e9fed2f", "output": "def fruit_distribution(s: str, n: int) -> int:\n    # Split the string into individual words\n    words = s.split()\n    # Initialize counters for apples, oranges, and mangoes\n    apples = 0\n    oranges = 0\n    mangoes = 0\n    # Iterate through the words\n    for word in words:\n        # Check if the word is \"apples\"\n        if word.lower() == \"apples\":\n            # Extract the number of apples\n            apples = int(words[words.index(word) - 1])\n        # Check if the word is \"oranges\"\n        elif word.lower() == \"oranges\":\n            # Extract the number of oranges\n            oranges = int(words[words.index(word) - 1])\n    # Calculate the number of mangoes by subtracting the total number of fruits and the number of apples and oranges\n    mangoes = n - apples - oranges\n    # Return the number of mangoes\n    return mangoes\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8e7ea2a8-5d2d-45b1-9c22-939e1897a6f6", "output": "python", "score": 0.0, "input": null, "reference_output": null}, {"id": "2ef6cccc-ee09-43b1-a9e6-0183a1981d99", "output": "from collections import Counter\n\ndef search(lst):\n    freq_counter = Counter(lst)\n    \n    for num, freq in freq_counter.items():\n        if num > 0 and freq >= num:\n            return num\n    \n    return -1\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "909c5633-67c1-40ba-aa9c-4e39f9369c62", "output": "def strange_sort_list(lst):\n    lst.sort() # sort the list in ascending order\n    result = [] \n    while len(lst) > 0:\n        result.append(lst.pop(0)) # add the minimum value\n        if len(lst) > 0:\n            result.append(lst.pop()) # add the maximum value\n    return result\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "066b3f94-dae5-4151-b9de-79e761227f28", "output": "python", "score": 0.0, "input": null, "reference_output": null}, {"id": "a53feafd-4586-4b47-8251-00794d6985df", "output": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "9cec3a05-18f6-483f-abd2-713494610f8d", "output": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    \n    return count\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "bc7c33b8-4012-4493-946c-dd39db6a6989", "output": "def total_match(lst1, lst2):\n    if sum(len(word) for word in lst1) < sum(len(word) for word in lst2):\n        return lst1\n    else:\n        return lst2\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "8e5556f5-5f57-46b3-b176-6a0b04512710", "output": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"\n    Checks if the given number is the product of 3 prime numbers.\n    \n    Parameters:\n    a (int): The number to check.\n    \n    Returns:\n    bool: True if the given number is the product of 3 prime numbers, False otherwise.\n    \"\"\"\n   def is_prime(n: int) -> bool:\n        \"\"\"\n        Checks if the given number is prime.\n        \n        Parameters:\n        n (int): The number to check.\n        \n        Returns:\n        bool: True if the given number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count > 2:\n                return True\n    return False\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "29c0fb0b-c24e-479e-93e1-35ff317c71b8", "output": "def is_simple_power(x, n):\n    if x == 1: # 1 to any power is still 1\n        return True\n    for i in range(2, x+1): # iterate through numbers from 2 to x\n        if n**i == x: # check if n to the power of i is equal to x\n            return True\n        elif n**i > x: # if n to the power of i is already greater than x, stop the loop\n            break\n    return False\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "f6c15338-b9d0-47c8-abbf-58ae8cdbd497", "output": "def iscube(a):\n    '''\n    Returns True if a is a cube of some integer number\n    '''\n    if a < 0:\n        a = abs(a)\n    return int(a ** (1/3)) ** 3 == a\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "2f85e4fa-02fc-46de-bfe5-0d9088e03718", "output": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "1145a2d6-d4e1-49a5-afb0-de6eff42f551", "output": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "39c20ce7-9ae0-4e09-ba65-509a60155481", "output": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "cec9ec0a-6ca0-44ea-9af9-842819c81c28", "output": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "2cf6ff93-494c-4a68-9a45-a8bcdb90ba40", "output": "import math\n\ndef prime_length(string):\n    \"\"\"\n    Checks if the length of the given string is a prime number\n    \"\"\"\n    length = len(string)\n    \n    # Edge cases for length 0 and 1\n    if length <= 1:\n        return False\n\n    # Check for prime using trial division\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    \n    return True\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "58b00947-7c96-47a5-a288-980a4b863b22", "output": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        str_i = str(i)\n        if str_i[0] == '1' or str_i[-1] == '1':\n            count += 1\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "23429e50-ceac-4d6a-b1e1-c3f86e7f009d", "output": "def solve(N):\n    ''' Given a positive integer N, return the total sum of its digits in binary.\n    '''\n    binary = bin(N)[2:]     # convert N to binary and remove '0b' prefix\n    binary_sum = sum(map(int, binary))     # calculate the sum of digits in binary\n    return bin(binary_sum)[2:]     # convert the sum to binary and remove '0b' prefix\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "ed4475ba-50cd-45b8-9ecb-fa2aaac818ec", "output": "def add(lst):\n    return sum([num for idx, num in enumerate(lst) if idx % 2 != 0 and num % 2 == 0])\n\npython", "score": 0.0, "input": null, "reference_output": null}, {"id": "46ef3058-a000-4879-99c0-a02e16337af2", "output": "def anti_shuffle(s):\n    # Split the string into a list of words\n    words = s.split(\" \")\n    \n    # Iterate over each word\n    for i in range(len(words)):\n        # Convert word into a list of characters\n        chars = list(words[i])\n        \n        # Sort the characters in ascending order based on ascii value\n        chars.sort()\n        \n        # Join the sorted characters back into a word\n        words[i] = \"\".join(chars)\n    \n    # Join the words back into a string using space as separator\n    return \" \".join(words)\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "34874483-c9c7-4fb1-a0d6-cc56e894c7e8", "output": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coordinates.append((i, j))\n    \n    # Sort coordinates initially by rows in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    \n    # Sort coordinates of the same row by columns in descending order\n    coordinates.sort(key=lambda coord: coord[1], reverse=True)\n    \n    return coordinates\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "0e4a539c-0bdf-42e8-9bde-50f98c73a438", "output": "def sort_array(array):\n    # check if the array is empty\n    if len(array) == 0:\n        return []\n    \n    # calculate the sum of the first and last elements\n    sum_first_last = array[0] + array[-1]\n    \n    # check if the sum is odd or even\n    if sum_first_last % 2 == 0:\n        # if even, sort the array in descending order\n        return sorted(array, reverse=True)\n    else:\n        # if odd, sort the array in ascending order\n        return sorted(array)\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "cd97f9da-6020-4239-a3ad-5117058b50cc", "output": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            ascii_val = ord(char)\n            encrypted_char = chr(((ascii_val - 97 + (2*2)) % 26) + 97)\n            encrypted += encrypted_char\n        else:\n            encrypted += char\n    return encrypted\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "68d3d0cd-3aa4-4827-bce7-f1c593da8b23", "output": "def next_smallest(lst):\n    # check if list is empty or only has one element\n    if len(lst) < 2:\n        return None\n    \n    # sort the list\n    sorted_lst = sorted(lst)\n    \n    # find the second smallest element\n    second_smallest = sorted_lst[1]\n    \n    return second_smallest\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "7509a317-390d-4e3e-893f-5e6ea552b2f8", "output": "def is_bored(S):\n    sentences = S.split(\".\")\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "42a89e9f-9bcd-4197-9bb2-30498e313b1d", "output": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "f300b861-e70f-4798-903c-19d45c53c7c2", "output": "def encode(message):\n    encoded = ''\n    \n    for char in message:\n        if char.isalpha():\n            # Swap case\n            if char.islower():\n                encoded += char.upper()\n            else:\n                encoded += char.lower()\n            \n            # Replace vowels\n            if char.lower() in 'aeiou':\n                encoded += chr(ord(char) + 2)\n        else:\n            encoded += char\n    \n    return encoded\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "5b10e767-c664-4944-9a1d-e66ea8791c09", "output": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum(lst):\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    if largest_prime is None:\n        return 0\n    return sum_of_digits(largest_prime)\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "55e5b9a1-5392-4ecc-83a0-d97551d229fe", "output": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n        \n    keys = list(dict.keys())\n    first_key = keys[0]\n    is_lower = all(key.islower() for key in keys)\n    is_upper = all(key.isupper() for key in keys)\n    \n    return is_lower or is_upper\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "7492f8e2-7d26-43d1-9d97-7c5826e51199", "output": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "5309126e-ab12-4f01-8618-c2336af45f14", "output": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "b21a306b-a518-47bd-ad1b-18a0f38dc6f4", "output": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "aebde962-4ca3-40f8-a640-e23591d2007a", "output": "def closest_integer(value):\n    return int(value) if float(value) % 1 == 0 else int(float(value) + (1 if float(value) > 0 else -1))\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "1c34ddf0-c24b-49fd-9907-9dd89bbe12d4", "output": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "54fd89a8-968c-4af8-9472-4c9ec27fd372", "output": "def words_string(s):\n    return s.replace(\",\", \" \").split()\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "686be19d-7724-40cd-ac08-a46220ea9098", "output": "def choose_num(x, y):\n    max_num = -1\n\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_num:\n            max_num = num\n    \n    return max_num\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "b68bb7d7-5476-4466-b1e4-862efba5d9ed", "output": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = round(sum(range(n, m+1)) / (m-n+1))\n    binary = bin(average)\n    return binary\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "a6172b53-26da-4e5f-920b-06a73dfef1df", "output": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8b6abcaa-31bb-4c24-8f48-c1ea2c509598", "output": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    \n    # Filter out numbers outside the range 1-9 and sort the remaining numbers\n    filtered_nums = sorted(filter(lambda x: 1 <= x <= 9, arr))\n\n    # Replace the sorted numbers with their corresponding names\n    names = [digit_names[num] for num in filtered_nums]\n\n    # Reverse the list of names\n    reversed_names = names[::-1]\n\n    return reversed_names\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "18cf0732-0b9c-4f8c-834d-6b6cc60ba1e3", "output": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Compute the factorial of i\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Compute the sum of numbers from 1 to i\n            total = 0\n            for j in range(1, i+1):\n                total += j\n            result.append(total)\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "d98630b2-943e-47ea-9227-9f3843bf5ae1", "output": "def even_odd_palindrome(n):\n   def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "26fd3953-a2cb-45bf-861f-3b5b99422146", "output": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "2c6bdce4-ffd9-402b-a1b7-b58978e2d50f", "output": "def move_one_ball(arr):\n    # If the array is empty, return True\n    if not arr:\n        return True\n    \n    # Find the minimum element in the array\n    min_val = min(arr)\n    \n    # Find the index of the minimum element\n    min_index = arr.index(min_val)\n    \n    # Perform right shift operations until the minimum element is at the start\n    while min_index != 0:\n        # Perform one right shift operation\n        arr = [arr[-1]] + arr[:-1]\n        \n        # Update the index of the minimum element\n        min_index = (min_index - 1) % len(arr)\n    \n    # Check if the array is in non-decreasing order\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    \n    return True\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "73ee8630-5d8d-4f0c-a3dc-73a040ded57c", "output": "def exchange(lst1, lst2):\n    odd1 = sum(1 for num in lst1 if num % 2 != 0) # count the number of odd elements in lst1\n    odd2 = sum(1 for num in lst2 if num % 2 != 0) # count the number of odd elements in lst2\n    \n    return \"YES\" if odd1 <= odd2 else \"NO\"  # if the number of odd elements in lst1 is less than or equal to the number of odd elements in lst2, return \"YES\", otherwise return \"NO\"\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "8a1393e1-3e5a-4a81-b85d-8ff37cd91ba3", "output": "def histogram(test):\n    # Split the string into a list of words\n    words = test.split()\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Iterate through each word\n    for word in words:\n        # Check if the word is already a key in the dictionary\n        if word in counts:\n            # If it is, increment the count by 1\n            counts[word] += 1\n        else:\n            # If it is not, add the word as a key with a count of 1\n            counts[word] = 1\n    # Find the maximum count\n    max_count = max(counts.values())\n    # Create a new dictionary to store the letters with the maximum count\n    result = {}\n    # Iterate through each key-value pair in the counts dictionary\n    for key, value in counts.items():\n        # Check if the value is equal to the maximum count\n        if value == max_count:\n            # If it is, add the key-value pair to the result dictionary\n            result[key] = value\n    # Return the result dictionary\n    return result\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "c16760ee-0439-433c-bad9-f3117023ea4d", "output": "def reverse_delete(s, c):\n    # Delete all characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c])\n\n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n\n    # Return the result string and the check for palindrome\n    return result, is_palindrome\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "db44e13d-f7de-4220-abfb-431d63f9911b", "output": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for char in string if int(char) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count))\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "39f88df6-fb9e-4e66-a18e-f3d406e765a4", "output": "def minSubArraySum(nums):\n    n = len(nums)\n    min_sum = float('inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += nums[i]\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "897a51e2-12dc-4615-92d1-6768231c80be", "output": "def max_fill(grid, capacity):\n    # Initialize variables\n    rows = len(grid)\n    cols = len(grid[0])\n    buckets = [0] * cols\n    count = 0\n\n    # Iterate over each row\n    for i in range(rows):\n        # Iterate over each well in the row\n        for j in range(cols):\n            # If well has water and bucket is not full\n            if grid[i][j] == 1 and buckets[j] < capacity:\n                # Fill the bucket\n                buckets[j] += 1\n            # If well is empty and bucket is not empty\n            elif grid[i][j] == 0 and buckets[j] > 0:\n                # Empty the bucket\n                buckets[j] -= 1\n            # If bucket is full\n            elif buckets[j] == capacity:\n                # Empty the bucket\n                buckets[j] -= 1\n            # Increase count if bucket was lowered\n            if buckets[j] < capacity:\n                count += 1\n    \n    return count\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "2cf5010f-029d-4038-83fd-4fa385a5ae31", "output": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "9391aa1c-2187-48a8-94f3-fbda4d873026", "output": "import re\n\ndef select_words(s, n):\n    if not s:\n        return []\n\n    words = re.findall(r'[a-zA-Z]+', s)\n    result = []\n    for word in words:\n        consonants = len(re.findall(r'[^aeiouAEIOU]', word))\n        if consonants == n:\n            result.append(word)\n    return result\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "742cd7cb-86dd-4201-bcc6-fb5b1fe3f066", "output": "def get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    # iterate the word from the right side\n    for i in range(len(word)-1, 1, -1):\n        if word[i].lower() in vowels: # check if the character is a vowel\n            # check the characters to the left and right of the vowel\n            if word[i-1].isalpha() and not word[i-1].lower() in vowels and word[i+1].isalpha() and not word[i+1].lower() in vowels:\n                return word[i]\n    return \"\"\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "222a8a86-408f-4de7-82b4-f047fec3deea", "output": "def match_parens(lst):\n    # Count the number of open parentheses and closed parentheses separately\n    open_count = sum([s.count('(') for s in lst])\n    closed_count = sum([s.count(')') for s in lst])\n    \n    # If the number of open and closed parentheses is equal, return 'Yes'\n    if open_count == closed_count:\n        return 'Yes'\n    else:\n        return 'No'\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "72c03459-a3f8-4d4f-a5b0-c9c9ccb4e5e4", "output": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "f132d5eb-40dc-4c52-ba49-b5664c9c132b", "output": "def solution(lst):\n    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0])\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "b4951ea8-92cb-443d-8cea-3670e6bac320", "output": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "78e454e1-138f-429a-a4ca-d929619f3cda", "output": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted([num for num in collatz_seq if num % 2 != 0])\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "bc85b6ad-1f87-44a8-af3d-d7649962cdab", "output": "import re\n\ndef valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Check the format of the date string\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    \n    # Split the date string into day, month, and year\n    day, month, year = map(int, date.split('-'))\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the number of days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2:\n        # Check if it's a leap year\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        elif day < 1 or day > 28:\n            return False\n    \n    return True\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "eec8aa20-db58-4ffc-a876-632d075f4504", "output": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for letter in txt if ord('a') <= ord(letter.lower()) <= ord('z') and ord(letter.lower()) % 2 != 0)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "b461c223-973b-4ac2-ae0c-2de5907a46f3", "output": "def is_sorted(lst):\n    if len(set(lst)) < len(lst):\n        return False\n    return lst == sorted(lst)\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "60a0c335-1baf-4de6-8ecd-52c331642c12", "output": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if the intervals don't intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "9f8f460a-14cc-43f8-a7c9-1002b93d6687", "output": "from functools import reduce\n\ndef prod_signs(arr):\n    if len(arr) == 0:\n        return None\n\n    sign = reduce(lambda x, y: x * y, [-1 if num < 0 else 1 if num > 0 else 0 for num in arr])\n    return sign * sum([abs(num) for num in arr])\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "f749e848-6d47-433e-9ef9-54e619e54850", "output": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    positions = [(i, j) for i in range(n) for j in range(m)]\n    \n   def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n        neighbors = [(x, y) for x, y in neighbors if 0 <= x < n and 0 <= y < m]\n        neighbors = sorted(neighbors, key=lambda x: grid[x[0]][x[1]])\n        \n        for x, y in neighbors:\n            if (x, y) not in path:\n                result = dfs(x, y, path + [(x, y)])\n                if result:\n                    return result\n        \n        return None\n    \n    # Find the minimum path starting from each position\n    all_paths = [dfs(i, j, [(i, j)]) for i, j in positions]\n    \n    # Remove None values and return the lexicographically smallest path\n    return min(filter(None, all_paths), key=lambda x: [grid[i][j] for i, j in x])\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a8378cc2-4891-4f96-bcc8-bbc8958d3a2f", "output": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "e5ff031a-4c96-444a-9bfe-ecda73b67d83", "output": "def digits(n):\n    '''Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    '''\n    # Initialize the product to 1\n    product = 1\n    \n    # Convert the number to string to iterate over its digits\n    n_str = str(n)\n    \n    # Iterate over each digit\n    for digit_str in n_str:\n        digit = int(digit_str)\n        # Multiply the product by the digit if it's odd\n        if digit % 2 != 0:\n            product *= digit\n    \n    # Check if the product is still 1, which means all digits were even\n    # If so, return 0\n    if product == 1:\n        return 0\n    \n    # Return the computed product\n    return product\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "e3663a27-2bec-4e3b-b3e1-127a9a5a133a", "output": "def is_nested(string):\n    # Initialize an empty stack\n    stack = []\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is an opening bracket, push it onto the stack\n        if char == \"[\":\n            stack.append(char)\n        # If the character is a closing bracket, check if the stack is empty\n        elif char == \"]\":\n            # If the stack is empty, there is no opening bracket to match with, so return False\n            if not stack:\n                return False\n            # If the stack is not empty, pop the top element from the stack\n            # This opening bracket will match with the current closing bracket\n            stack.pop()\n    \n    # If there are any remaining opening brackets in the stack, return True\n    # This means that there is at least one bracket that is nested\n    return bool(stack)\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "d391b0a9-aa77-4843-9ce0-f6b602b5cd9f", "output": "import math\n\ndef sum_squares(lst):\n    squared_sum = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        squared_sum += squared_num\n    return squared_sum\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "1018a8de-e860-44f3-989c-414f13cc84a6", "output": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        words = txt.split()\n        last_word = words[-1]\n        if last_char not in last_word:\n            return True\n    return False\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "acb4ebb7-ec75-4f18-a3e8-933cb5482c73", "output": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "7cfdf1e7-a1f1-4486-8ac9-c83338923caf", "output": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    if neg_integers:\n        largest_neg = max(neg_integers)\n    else:\n        largest_neg = None\n    if pos_integers:\n        smallest_pos = min(pos_integers)\n    else:\n        smallest_pos = None\n    return (largest_neg, smallest_pos)\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "63a1418a-a4e3-45b9-bd1b-fbc9ba540a1b", "output": "def compare_one(a, b):\n    if type(a) == type(b):\n        if isinstance(a, int):\n            return max(a, b)\n        elif isinstance(a, float):\n            return max(float(a), float(b))\n        elif isinstance(a, str):\n            if ',' in a or ',' in b:\n                a = a.replace(',', '.')\n                b = b.replace(',', '.')\n            return max(a, b)\n    else:\n        return None\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "72d4ed8d-cf7c-4f7d-bb35-9e0c8e0e0cf2", "output": "def is_equal_to_sum_even(n):\n    # Iterate through possible values of the first even number\n    for i in range(2, n, 2):\n        # Iterate through possible values of the second even number\n        for j in range(2, n - i, 2):\n            # Iterate through possible values of the third even number\n            for k in range(2, n - i - j, 2):\n                # Check if the fourth number is even and equal to the remaining sum\n                if (n - i - j - k) % 2 == 0 and (n - i - j - k) != 0:\n                    return True\n    return False\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "65b1b231-244b-4b06-93aa-a044f449c757", "output": "def special_factorial(n):\n    if n == 1:\n        return 1\n    factorial = 1\n    for i in range(n, 0, -1):\n        factorial *= i ** (i - 1)\n    return factorial\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "32406fb2-fe92-4a5d-91cb-fcd16e9a2ad4", "output": "import re\n\ndef fix_spaces(text):\n    text = re.sub(r'\\s+', ' ', text.strip())\n    text = text.replace(' ', '_')\n    text = re.sub(r'_+', '_', text)\n    text = re.sub(r' -+', '-', text)\n    return text\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "ed5e9166-78e7-467d-9f0a-c49a245961bd", "output": "import re\n\ndef file_name_check(file_name):\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "37b529ce-1fa8-4cec-9139-dea69b99f58a", "output": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i]**3\n        \n    return sum\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "030a3272-aea4-488d-825a-cbd797f8787a", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n\nThe given problem requires finding the words from the original sentence whose lengths are prime numbers. To solve this problem, we can firstdefine a helper function `is_prime(n)` that checks if a number is prime or not. Then, we split the sentence into individual words using the `split()` method and store them in a list called `words`. Next, we iterate over each word in `words` and use the `is_prime()` function to check if the length of the word is prime. If it is prime, we add it to the list called `prime_words`. Finally, we join the words in `prime_words` using the `join()` method with a space delimiter to form a string and return it as the result.", "score": 0.0, "input": null, "reference_output": null}, {"id": "5a4a8513-45bb-41ea-b15a-c81f13070a2c", "output": "from fractions import Fraction\n\ndef simplify(x, n):\n    x = Fraction(x)\n    n = Fraction(n)\n    \n    product = x * n\n    \n    return product == int(product)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "70c067e7-3917-489b-8214-ab44e2e1e28f", "output": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a7b7aeb0-b583-4d08-a429-d60a87fdce76", "output": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "38d622da-4955-4f77-9491-524034d61fd1", "output": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "45c3ab6b-9012-4de2-bcb7-476fcaa72af3", "output": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\n    min_index = min(planet1_index, planet2_index)\n    max_index = max(planet1_index, planet2_index)\n\n    return tuple(planets[min_index+1:max_index])\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "eb4d716f-5f3f-4e58-ac00-7488e9d6d5b6", "output": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "45684c68-4f26-44a0-a4ec-9666008e6e42", "output": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "2babcf50-740e-44a2-9e82-985990d3599d", "output": "def double_the_difference(lst):\n    return sum([num**2 for num in lst if num > 0 and num % 2 != 0 and isinstance(num, int)])\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "300dc486-055a-4a80-9f1f-59354ce8374d", "output": "def compare(game, guess):\n    return [0 if g == s else abs(g - s) for g, s in zip(guess, game)]\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "5cb28e9d-36bf-433e-9b82-0fed9255ff35", "output": "def Strongest_Extension(class_name, extensions):\n    strongest = None\n    strongest_strength = None\n\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n\n        if strongest_strength is None or strength > strongest_strength:\n            strongest = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest}\"\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "945c5058-1d22-4ee9-96b2-719e6fcf4684", "output": "def cycpattern_check(a , b):\n    # Concatenate the first word with itself to account for rotations\n    c = a + a\n    # Check if the second word or any of its rotations is a substring in the concatenated string\n    return b in c\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "425fa700-74e1-4ade-95d3-6c0a4c1d4e07", "output": "def even_odd_count(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each character in the string\n    for digit in num_str:\n        # Convert the character back to an integer\n        digit_int = int(digit)\n        \n        # Check if the digit is even or odd\n        if digit_int % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return the counts as a tuple\n    return (even_count, odd_count)\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "62b157f1-588a-4f77-945a-92fb7d479975", "output": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, symbol in roman_numerals.items():\n        while number >= value:\n            result += symbol\n            number -= value\n\n    return result\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ec1d3b42-a47e-4982-8a1c-654b510568b6", "output": "def right_angle_triangle(a, b, c):\n    # Square the lengths of the sides\n    a_squared = a ** 2\n    b_squared = b ** 2\n    c_squared = c ** 2\n\n    # Check if the sum of squares of two sides equals the square of the third side\n    if a_squared + b_squared == c_squared:\n        return True\n    elif a_squared + c_squared == b_squared:\n        return True\n    elif b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8dad4294-5676-4823-a098-831226c9ead6", "output": "def find_max(words):\n    max_chars = 0\n    max_word = ''\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_chars:\n            max_chars = unique_chars\n            max_word = word\n        \n        elif unique_chars == max_chars:\n            if word < max_word:\n                max_word = word\n    \n    return max_word\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "c71166c8-40e9-45af-90a1-6dca2cc1f115", "output": "def eat(number: int, need: int, remaining: int) -> List[int]:\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "368f2c42-7e8b-416f-8c9f-cdc012baaf40", "output": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(1, len(operands)):\n        expression += ' ' + operators[i-1] + ' ' + str(operands[i])\n    return eval(expression)\n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "687e7d6b-1b2d-4028-9e5d-7748697648df", "output": "def solve(s):\n    # Check if the string contains any letters\n    contains_letters = any(c.isalpha() for c in s)\n\n    # If string contains no letters, reverse the string\n    if not contains_letters:\n        return s[::-1]\n\n    # Reverse the case of letters\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n\npython", "score": 0.0, "input": null, "reference_output": null}, {"id": "22ef5277-1fa8-4b86-a79a-99438e303446", "output": "python \nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "187bfb11-3cc9-4525-a431-2055f8ec2c18", "output": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b+1) if any(int(digit) % 2 == 0 for digit in str(i))]\n\n", "score": 0.0, "input": null, "reference_output": null}], "updated_at": "2023-08-15T11:25:21.963403", "created_at": "2023-08-15T11:25:21.963403", "page": null, "page_size": null, "total_pages": null, "total_count": null}