{"id": "92ee7f0a-f407-4cb9-bf54-0c14cf49abec", "name": "claude", "test_suite_id": "6bd8eb2d-176a-45ad-82d6-451942358200", "test_cases": [{"id": "b530ae9c-6d2b-436a-83ac-58838151409b", "output": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers = sorted(numbers)\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a594fee1-47c4-4464-b5f4-f52d14b984a3", "output": " import re\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    return re.findall(r'\\([^()]*\\)', paren_string)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "b00165dd-a1ee-459c-8e8d-6c2eedcffe72", "output": "def truncate_number(number: float) -> float:\n    return number % 1\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "52c0f761-34c4-46e8-a9b8-be5b4da3fff7", "output": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "c7f27e2e-1073-4bd0-9226-a1d237ef2e77", "output": " import statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "703e48be-e6d7-4938-90c9-9180ce14e918", "output": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "934fbcd9-25bc-4569-8fb8-d2bcaecbde81", "output": " import re\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        stack = 0\n        max_stack = 0\n        for char in group:\n            if char == '(':\n                stack += 1\n                max_stack = max(max_stack, stack)\n            elif char == ')':\n                stack -= 1\n        max_depths.append(max_stack)\n    return max_depths\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "f094a926-1c57-4e54-9c87-0984cb877b3c", "output": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "2684b797-c3b9-4391-a522-3ba5b1cb1f84", "output": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return sum_, product\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "5395072e-aa48-4c42-b9f7-157c1f8da728", "output": "def rolling_max(numbers: List[int]) -> List[int]:\n    rolling = []\n    current_max = float(\"-inf\")\n    for number in numbers:\n        current_max = max(current_max, number)\n        rolling.append(current_max)\n    return rolling\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "620f732a-0075-47fc-8342-6973149837ce", "output": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata') \n    'catac'\n    \"\"\"\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a57a232c-9ccc-4c56-82b6-f7b378f04764", "output": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "124066e8-44e8-463a-a1b3-e4c03a8e5c62", "output": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a16bfcaf-fc91-465b-ab8e-3b6892fce090", "output": "def greatest_common_divisor(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "071cd66b-25a2-4e50-bab4-f195d63ab1bb", "output": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "299ea298-1fa1-416e-a278-1bb6430d551a", "output": "def string_sequence(n):\n  return ' '.join([str(i) for i in range(n+1)])\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8985a166-0d2d-4271-85d2-58ecc319ccef", "output": "def count_distinct_characters(string):\n    return len(set(string.lower()))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "e5725cf2-0404-43ee-aa8b-d8c7afd95b15", "output": " from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Parses a string of musical notes into a list of beat durations\"\"\"\n    \n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    durations = []\n    for note in music_string.split():\n        if note in notes:\n            durations.append(notes[note])\n    \n    return durations\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a0e346a6-68e3-450a-a76c-a47ab47c2f1d", "output": "def how_many_times(string, substring):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "5083e0c5-5b1b-4a15-a688-5f0503a75dde", "output": "def sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n               'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = numbers.split()\n    sorted_nums = sorted(nums, key=lambda x: num_map[x])\n    return ' '.join(sorted_nums)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "7309f671-2911-405c-8f72-7e214ba67e35", "output": " import math\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \n    numbers = sorted(numbers)\n    \n    min_diff = math.inf\n    closest_pair = None\n    \n    for i in range(len(numbers) - 1):\n        curr_diff = abs(numbers[i] - numbers[i+1])\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n            closest_pair = (numbers[i], numbers[i+1])\n            \n    return closest_pair\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "17258481-222e-4f5c-b582-7df331d775ee", "output": " import numpy as np\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    a = min(numbers)\n    b = max(numbers)\n    return [(x - a) / (b - a) for x in numbers]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "d186b0f7-b841-4a4d-8109-37cad765f429", "output": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "807c23de-6c66-4f9e-ab8d-f1ecac0ed711", "output": "def strlen(string):\n    return len(string)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "3c5a0469-2e1d-4b0d-8545-b315562d6b28", "output": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "97960b29-d222-44f5-8399-84e7889f923c", "output": "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n /= d\n        d = d + 1 if d == 2 else d + 2\n    return factors\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "628df64d-f91a-4c15-8252-ab5e7b70128a", "output": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "849b60b7-60e7-4b20-9504-85cc57f852bd", "output": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "272688bd-2e62-494b-b8c1-0199ed39cdb5", "output": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    \n    return ''.join(strings)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "6557bbdd-6a19-4f0b-afd2-af0e3180fe5a", "output": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "7e126303-0df4-4e63-b778-24949386ebcb", "output": "def get_positive(l):\n    return [i for i in l if i > 0]\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "f5ac5f7b-9526-4dd5-8872-3237b763a078", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False    \n    return True\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ff7ffb16-8107-478f-9310-176a4230d9e7", "output": " import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial. \n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    left, right = -1000, 1000\n    while right - left > 1e-6:\n        mid = (left + right) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) > 0:\n            right = mid\n        else:\n            left = mid\n    return (left + right) / 2\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "9391fc11-f5fc-49f7-b587-a6aa054634e5", "output": "def sort_third(l):\n    lst = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            lst.append(sorted(l[i::3])[i//3])\n        else:\n            lst.append(l[i])\n    return lst\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "dd528537-b951-4e53-8474-a249fd1354c5", "output": "def unique(l: list): \n    return sorted(set(l))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "cf05058e-c31b-4848-aacd-c88d38d8128f", "output": "def max_element(l: list):\n    return max(l)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "fb11905e-3ce4-4e93-938b-b1a981ac5fe3", "output": "def fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ee1c601a-f0f6-468b-b457-999f551dbda2", "output": "def sort_even(l):\n    even = sorted(l[::2])\n    return [a if i % 2 else b for i, (a, b) in enumerate(zip(l, even))]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "5cc55008-c4e9-4aed-b423-11001f4a68a5", "output": "def decode_cyclic(s):\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "cbad58e1-b910-4270-ac25-0456552e8afa", "output": " from math import sqrt\n\ndef is_prime(x):\n    if x < 2:\n        return False\n    for i in range(2, int(sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        c = a + b\n        a, b = b, c\n        if is_prime(c):\n            count += 1\n    return b\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "6873c9c6-ecc8-47a1-93e7-87243649d71b", "output": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "40bfdca9-da7d-489d-b65b-888f8cb376d7", "output": "def car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "97f17c37-888b-4659-ae8c-94ab16c7fd65", "output": "def incr_list(l: list):\n    return [x + 1 for x in l]\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "d4dd3cf3-6c6a-424a-94ab-5cd1acb86601", "output": "def pairs_sum_to_zero(l):\n  seen = set()\n  for i in l:\n    if -i in seen:\n      return True\n    seen.add(i)\n  return False\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "c4d2b103-c04f-435d-a72c-52bef2d0211f", "output": "def change_base(x, base):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "b2dafd49-7b9a-4242-9d2f-03dc8e68c769", "output": "def triangle_area(a, h):\n    return 0.5 * a * h\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "c02ef1cf-d610-4809-9a29-f23da246c66d", "output": "def fib4(n: int) -> int:\n    if n < 2: \n        return 0\n    if n == 2:\n        return 2\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(3, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "ef8ab107-7768-4c95-bc61-c55181cdda48", "output": "def median(l: list):\n    l.sort()\n    length = len(l)\n    mid = length // 2\n    if length % 2 == 0:\n        return (l[mid-1] + l[mid]) / 2  \n    else:\n        return l[mid]\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "2f91eecc-583c-461e-987d-c8df77255d17", "output": "def is_palindrome(text):\n    return text == text[::-1]\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8f7ae5a4-ba82-451f-9f11-b778cbe8f1db", "output": "def modp(n, p):\n    return pow(2, n, p)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "2a7beef6-c7c9-4e52-81e7-8e708e53cb27", "output": "def encode_shift(s):\n    shifted = \"\"\n    for ch in s:\n        shifted += chr(((ord(ch) - ord('a') + 5) % 26) + ord('a'))\n    return shifted\n\ndef decode_shift(s):\n    decoded = \"\"\n    for ch in s:\n        decoded += chr(((ord(ch) - ord('a') - 5) % 26) + ord('a')) \n    return decoded\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ed15a58e-c95a-4b9c-afc0-569f1c9ceee0", "output": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([letter for letter in text if letter not in vowels])\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "14288f32-c672-4517-b1e6-879fc3c31d2b", "output": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "a0f40d14-6858-46d9-94eb-da2de1ecd14b", "output": "def add(x: int, y: int) -> int:\n    return x + y\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "e459dcde-59eb-49e7-a117-07923bd1c50b", "output": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"Check if two words have the same characters.\"\"\"\n    return sorted(s0) == sorted(s1)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "72e35cca-578e-4faf-8f6f-73177e1c2db9", "output": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "3fe46077-7e56-44f9-809a-f72eaba574c0", "output": "def correct_bracketing(brackets):\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ad01b8b3-246c-4799-9664-8d305b529887", "output": "def monotonic(l):\n  increasing = decreasing = True\n  \n  for i in range(len(l) - 1):\n    if l[i] < l[i+1]:\n      decreasing = False\n    elif l[i] > l[i+1]:\n      increasing = False\n      \n  return increasing or decreasing\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "94dcf375-ac03-46e5-a32d-73cb34a21933", "output": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "b608f192-af77-4ef8-a7e3-1ac88eed6f29", "output": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "f4a2092d-faae-403a-a19c-80334af21c35", "output": "def sum_to_n(n):\n    return sum(range(1, n+1))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "afa7a548-7efd-4653-9e2e-e40f4005c897", "output": "def correct_bracketing(brackets):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "47cb6d1e-c226-40b5-8a46-48fbaae8b47f", "output": "def derivative(xs):\n    return [i * x for i, x in enumerate(xs)][1:]\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "867febbe-31e2-4407-8d19-a0c0bbc52f2f", "output": "def fibfib(n: int) -> int:\n    if n < 3: \n        return 0 if n < 2 else 1\n    \n    prev_prev, prev, curr = 0, 0, 1\n    for _ in range(3, n+1):\n        curr, prev, prev_prev = curr + prev + prev_prev, curr, prev\n        \n    return curr\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "a7d45806-28f9-40c7-91a2-5c91e22862c6", "output": " import re\n\ndef vowels_count(s):\n    \"\"\"Count vowels in a string\"\"\"\n    vowels = 'aeiouy'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y' and len(s) > 1:\n        count -= 1\n    return count\n\nprint(vowels_count(\"abcde\")) # 2 \nprint(vowels_count(\"ACEDY\")) # 3\nprint(vowels_count(\"sky\")) # 2\nprint(vowels_count(\"fly\")) # 1\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "dffc4389-03a9-4bb5-a03c-ce6ced369f51", "output": "def circular_shift(x, shift):\n    x = str(x)\n    n = len(x)\n    shift = shift % n\n    return x[-shift:] + x[:-shift]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "0b164e77-d944-496d-a4c8-6f83f50f0af8", "output": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "89e6f55a-2fb0-4331-90ef-a4730e9fed2f", "output": "def fruit_distribution(s, n):\n    apple_count = int(s.split('apples')[0])\n    orange_count = int(s.split('oranges')[0].split('and')[-1].strip())\n    return n - apple_count - orange_count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8e7ea2a8-5d2d-45b1-9c22-939e1897a6f6", "output": "def pluck(arr):\n    res = []\n    smallest = float('inf')\n    idx = None\n    for i, v in enumerate(arr):\n        if v % 2 == 0 and v < smallest:\n            smallest = v\n            idx = i\n    if idx is not None:\n        res = [smallest, idx]\n    return res\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "2ef6cccc-ee09-43b1-a9e6-0183a1981d99", "output": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n        \n    return -1\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "909c5633-67c1-40ba-aa9c-4e39f9369c62", "output": "def strange_sort_list(lst):\n    result = []\n    while len(lst) > 0:\n        minimum = min(lst)\n        result.append(minimum)\n        lst.remove(minimum)\n        if len(lst) > 0:\n            maximum = max(lst)\n            result.append(maximum) \n            lst.remove(maximum)\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "066b3f94-dae5-4151-b9de-79e761227f28", "output": " import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a53feafd-4586-4b47-8251-00794d6985df", "output": "def will_it_fly(q, w):\n  if q == q[::-1] and sum(q) <= w:\n    return True\n  else:\n    return False\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "9cec3a05-18f6-483f-abd2-713494610f8d", "output": "def smallest_change(arr):\n    n = len(arr)\n    left = 0\n    right = n-1\n    \n    changes = 0\n    \n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            changes += 1\n            if abs(arr[left] - arr[right-1]) < abs(arr[right] - arr[left+1]):\n                right -= 1\n            else:\n                left += 1\n                \n    return changes\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "bc7c33b8-4012-4493-946c-dd39db6a6989", "output": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 <= sum2 else lst2\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8e5556f5-5f57-46b3-b176-6a0b04512710", "output": " import math\n\ndef is_multiply_prime(a):\n    \"\"\"Returns True if a is the multiplication of 3 primes, else False\"\"\"\n    \n    if a < 4:\n        return False\n    \n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            j = a / i\n            if j <= 1:\n                return False\n            if all(is_prime(x) for x in [i, j]):\n                return True\n            else:\n                return False\n                \n    return False\n\n\ndef is_prime(n):\n    \"\"\"Returns True if n is prime, else False\"\"\"\n    \n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "29c0fb0b-c24e-479e-93e1-35ff317c71b8", "output": "def is_simple_power(x, n):\n  import math\n  if x == 1: \n    return True\n  for i in range(2, int(math.log(x, n)) + 1):\n    if x == n ** i:\n      return True\n  return False\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "f6c15338-b9d0-47c8-abbf-58ae8cdbd497", "output": " import math\n\ndef iscube(a):\n    x = round(math.pow(abs(a), 1/3))\n    return x**3 == abs(a)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "2f85e4fa-02fc-46de-bfe5-0d9088e03718", "output": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in primes:\n            count += 1\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "1145a2d6-d4e1-49a5-afb0-de6eff42f551", "output": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "39c20ce7-9ae0-4e09-ba65-509a60155481", "output": "def is_happy(s):\n    if len(s) < 3:\n        return False\n        \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n        \n    return True\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "cec9ec0a-6ca0-44ea-9af9-842819c81c28", "output": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "2cf6ff93-494c-4a68-9a45-a8bcdb90ba40", "output": " import math\n\ndef prime_length(string):\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "58b00947-7c96-47a5-a288-980a4b863b22", "output": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit \n    positive integers that start or end with 1.\n    \"\"\"\n    \n    if n == 1:\n        return 1\n    \n    # Number of n-digit numbers starting with 1\n    start_one = 10**(n-1)\n    \n    # Number of n-digit numbers ending with 1   \n    end_one = 10**(n-1)\n    \n    return start_one + end_one\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "23429e50-ceac-4d6a-b1e1-c3f86e7f009d", "output": "def solve(N):\n    binary = bin(N)[2:]\n    return bin(sum(int(d) for d in binary))[2:]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "ed4475ba-50cd-45b8-9ecb-fa2aaac818ec", "output": "def add(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "46ef3058-a000-4879-99c0-a02e16337af2", "output": "def anti_shuffle(s):\n    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return ' '.join(new_words)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "34874483-c9c7-4fb1-a0d6-cc56e894c7e8", "output": "def get_row(lst, x):\n    coords = []\n    for i, row in enumerate(lst):\n        row_coords = [(x, j) for j in reversed(range(len(row))) if row[j] == x]\n        coords.extend([(i, c) for c in row_coords])\n    coords.sort()\n    return coords\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "0e4a539c-0bdf-42e8-9bde-50f98c73a438", "output": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5] \n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n        \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.reverse()\n        \n    return sorted_array\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "cd97f9da-6020-4239-a3ad-5117058b50cc", "output": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated = alphabet[2:] + alphabet[:2]\n    trans = str.maketrans(alphabet, rotated)\n    return s.translate(trans)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "68d3d0cd-3aa4-4827-bce7-f1c593da8b23", "output": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    return lst[1]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "7509a317-390d-4e3e-893f-5e6ea552b2f8", "output": " import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "42a89e9f-9bcd-4197-9bb2-30498e313b1d", "output": "def any_int(x, y, z):\n  if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n    return False\n  return (x == y + z) or (y == x + z) or (z == x + y)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "f300b861-e70f-4798-903c-19d45c53c7c2", "output": " import string\n\ndef encode(message):\n    vowels = 'aeiou'\n    replacements = 'cgkmq'\n    output = ''\n    for char in message.lower():\n        if char in vowels:\n            index = vowels.find(char)\n            output += replacements[index]\n        elif char.isalpha():\n            output += char.swapcase()\n        else:\n            output += char\n    return output\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "5b10e767-c664-4944-9a1d-e66ea8791c09", "output": " import math\n\ndef skjkasdkd(lst):\n    max_prime = 0\n    for x in lst:\n        if x > 1 and all(x % i for i in range(2, int(math.sqrt(x)) + 1)):\n            max_prime = max(max_prime, x)\n    return sum(int(d) for d in str(max_prime))\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "55e5b9a1-5392-4ecc-83a0-d97551d229fe", "output": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    if all(isinstance(k, str) for k in dict.keys()):\n        if all(k.islower() for k in dict.keys()) or all(k.isupper() for k in dict.keys()):\n            return True\n        \n    return False\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "7492f8e2-7d26-43d1-9d97-7c5826e51199", "output": " import math\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "5309126e-ab12-4f01-8618-c2336af45f14", "output": "def multiply(a, b):\n    return (a % 10) * (b % 10)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "b21a306b-a518-47bd-ad1b-18a0f38dc6f4", "output": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU' and s[i].isupper():\n            count += 1\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "aebde962-4ca3-40f8-a640-e23591d2007a", "output": " import math\n\ndef closest_integer(value):\n  value = float(value)\n  \n  if value.is_integer():\n    return int(value)\n  \n  floor = math.floor(value)\n  ceil = math.ceil(value)\n  \n  if abs(floor) > abs(ceil):\n    return floor\n  else:\n    return ceil\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "1c34ddf0-c24b-49fd-9907-9dd89bbe12d4", "output": "def make_a_pile(n):\n    result = [n]\n    next_num = n + 1 if n % 2 == 1 else n + 2\n    while len(result) < n:\n        result.append(next_num)\n        next_num += 2\n    return result\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "54fd89a8-968c-4af8-9472-4c9ec27fd372", "output": "def words_string(s):\n  return s.replace(',', ' ').split()\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "686be19d-7724-40cd-ac08-a46220ea9098", "output": "def choose_num(x, y):\n    even_nums = [num for num in range(x, y+1) if num % 2 == 0]\n    if even_nums:\n        return max(even_nums)\n    else:\n        return -1\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "b68bb7d7-5476-4466-b1e4-862efba5d9ed", "output": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n        \n    avg = total / count\n    avg_rounded = round(avg)\n    return f\"{avg_rounded:b}\"\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a6172b53-26da-4e5f-920b-06a73dfef1df", "output": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even = True\n                break\n        if not has_even:\n            result.append(num)\n    result.sort()\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8b6abcaa-31bb-4c24-8f48-c1ea2c509598", "output": "def by_length(arr):\n    result = []\n    for num in sorted(a for a in arr if 1 <= a <= 9)[::-1]:\n        if num == 1:\n            result.append('One')\n        elif num == 2:\n            result.append('Two')\n        elif num == 3:\n            result.append('Three')\n        elif num == 4: \n            result.append('Four')\n        elif num == 5:\n            result.append('Five')\n        elif num == 6:\n            result.append('Six')\n        elif num == 7:\n            result.append('Seven') \n        elif num == 8:\n            result.append('Eight')\n        elif num == 9:\n            result.append('Nine')\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "18cf0732-0b9c-4f8c-834d-6b6cc60ba1e3", "output": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "d98630b2-943e-47ea-9227-9f3843bf5ae1", "output": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "26fd3953-a2cb-45bf-861f-3b5b99422146", "output": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(d) for d in str(abs(num))]\n        if sum(digits) > 0:\n            count += 1\n    return count\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "2c6bdce4-ffd9-402b-a1b7-b58978e2d50f", "output": "def move_one_ball(arr):\n    if len(arr) <= 1:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[-1] == sorted_arr[0]:\n            arr = [arr[-1]] + arr[:-1] \n        if arr == sorted_arr:\n            return True\n    return False\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "73ee8630-5d8d-4f0c-a3dc-73a040ded57c", "output": "def exchange(lst1, lst2):\n    lst1_odd = [x for x in lst1 if x % 2 == 1]\n    lst2_even = [x for x in lst2 if x % 2 == 0]\n    \n    if len(lst1_odd) <= len(lst2_even):\n        return \"YES\"\n    else:\n        return \"NO\"\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "8a1393e1-3e5a-4a81-b85d-8ff37cd91ba3", "output": " import collections\n\ndef histogram(test):\n    counter = collections.Counter(test.split())\n    max_count = max(counter.values())\n    return {letter:count for letter, count in counter.items() if count == max_count}\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "c16760ee-0439-433c-bad9-f3117023ea4d", "output": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in set(c))\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "db44e13d-f7de-4220-abfb-431d63f9911b", "output": "def odd_count(lst):\n  output = []\n  for i, s in enumerate(lst):\n    count = sum(int(d) % 2 == 1 for d in s)\n    output.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + str(count) + \" of the \" + str(count) + \"nput.\")\n  return output\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "39f88df6-fb9e-4e66-a18e-f3d406e765a4", "output": " import sys\n\ndef minSubArraySum(nums):\n    min_sum = sys.maxsize\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "897a51e2-12dc-4615-92d1-6768231c80be", "output": " Here is an expert Python solution for the max_fill function:\n\ndef max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    fill_count = 0\n    \n    for col in range(cols):\n        water_in_col = 0\n        for row in range(rows):\n            if grid[row][col] == 1:\n                water_in_col += 1\n                \n        buckets_needed = math.ceil(water_in_col / capacity)\n        fill_count += buckets_needed\n        \n    return fill_count\n\n\n\nThe key steps are:\n\n1. Calculate the number of rows and columns in the grid\n2. For each column, calculate the total water \n3. Calculate the number of full bucket loads needed to empty the column\n4. Add the number of bucket loads across all columns\n\nThis efficiently calculates the minimum number of bucket fills needed without modifying the original grid.", "score": 0.0, "input": null, "reference_output": null}, {"id": "2cf5010f-029d-4038-83fd-4fa385a5ae31", "output": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "9391aa1c-2187-48a8-94f3-fbda4d873026", "output": " import re\n\ndef select_words(s, n):\n    pattern = r'\\b[a-zA-Z]*[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]{%d}[a-zA-Z]*\\b' % n\n    return re.findall(pattern, s)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "742cd7cb-86dd-4201-bcc6-fb5b1fe3f066", "output": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and not word[i-1] in vowels:\n            return word[i]\n    return ''\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "222a8a86-408f-4de7-82b4-f047fec3deea", "output": "def match_parens(lst):\n    s1, s2 = lst\n    open_cnt = s1.count('(') + s2.count('(')\n    close_cnt = s1.count(')') + s2.count(')')\n    if open_cnt != close_cnt:\n        return 'No'\n    \n    s1_open = s1.count('(')\n    s2_open = s2.count('(')\n    \n    if s1_open > close_cnt - s2_open:\n        return 'No'\n    \n    return 'Yes'\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "72c03459-a3f8-4d4f-a5b0-c9c9ccb4e5e4", "output": " import heapq\n\ndef maximum(arr, k):\n    heapq.heapify(arr)\n    return heapq.nlargest(k, arr)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "f132d5eb-40dc-4c52-ba49-b5664c9c132b", "output": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    \n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "b4951ea8-92cb-443d-8cea-3670e6bac320", "output": "def add_elements(arr, k):\n    sum = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] > 9 and arr[i] < 100:\n            sum += arr[i]\n    return sum\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "78e454e1-138f-429a-a4ca-d929619f3cda", "output": "def get_odd_collatz(n):\n    odd_nums = []\n    while n > 1:\n        odd_nums.append(n) if n % 2 == 1 else None\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_nums.append(1)\n    odd_nums.sort()\n    return odd_nums\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "bc85b6ad-1f87-44a8-af3d-d7649962cdab", "output": " import re\n\ndef valid_date(date):\n  if not date:\n    return False\n    \n  date_pattern = re.compile(r\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-([0-9]{4})$\")\n  match = date_pattern.match(date)\n  if not match:\n    return False\n\n  month = int(match.group(1))\n  day = int(match.group(2))\n\n  if month in [1, 3, 5, 7, 8, 10, 12]:\n    if day < 1 or day > 31:\n      return False\n  elif month in [4, 6, 9, 11]:\n    if day < 1 or day > 30:\n      return False\n  elif month == 2:\n    if day < 1 or day > 29: \n      return False\n\n  return True\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "eec8aa20-db58-4ffc-a876-632d075f4504", "output": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 1)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "b461c223-973b-4ac2-ae0c-2de5907a46f3", "output": "def is_sorted(lst):\n  if len(lst) <= 1:\n    return True\n\n  prev = lst[0] \n  for i in range(1, len(lst)):\n    current = lst[i]\n    if current < prev:\n      return False\n    elif current == prev:\n      if i < len(lst)-1 and lst[i+1] == current:\n        return False\n    prev = current\n\n  return True\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "60a0c335-1baf-4de6-8ecd-52c331642c12", "output": " import math\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check if the intervals intersect\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    # Find the intersection\n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    # Get the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is prime\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "9f8f460a-14cc-43f8-a7c9-1002b93d6687", "output": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    signs = [-1 if x < 0 else 1 if x > 0 else 0 for x in arr]\n    sign_product = 1\n    for s in signs:\n        sign_product *= s\n    \n    return abs(sum(arr)) * sign_product\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "f749e848-6d47-433e-9ef9-54e619e54850", "output": " import heapq\n\ndef minPath(grid, k):\n    \n    N = len(grid)\n    \n    q = [(grid[0][0], 0, 0, [grid[0][0]])]\n    seen = set((0, 0))\n    \n    while q:\n        cost, i, j, path = heapq.heappop(q)\n        \n        if len(path) == k:\n            return path\n        \n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < N and 0 <= y < N and (x, y) not in seen:\n                seen.add((x, y))\n                heapq.heappush(q, (cost + grid[x][y], x, y, path + [grid[x][y]]))\n                \n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a8378cc2-4891-4f96-bcc8-bbc8958d3a2f", "output": "def tri(n):\n    trib = [1, 3]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            trib.append(1 + i//2)\n        else:\n            trib.append(trib[i-1] + trib[i-2] + trib[i-3])\n    return trib\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "e5ff031a-4c96-444a-9bfe-ecda73b67d83", "output": "def digits(n):\n    product = 1\n    for d in str(n):\n        d = int(d)\n        if d % 2 == 1:\n            product *= d\n    return product or 0\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "e3663a27-2bec-4e3b-b3e1-127a9a5a133a", "output": "def is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char) \n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    return False\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "d391b0a9-aa77-4843-9ce0-f6b602b5cd9f", "output": " import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "1018a8de-e860-44f3-989c-414f13cc84a6", "output": " import re\n\ndef check_if_last_char_is_a_letter(txt):\n  if not txt:\n    return False\n  \n  last_char = txt[-1]\n  if last_char.isalpha():\n    if re.search(r'\\w' + last_char, txt):\n      return False\n    else:\n      return True\n  else:\n    return False\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "acb4ebb7-ec75-4f18-a3e8-933cb5482c73", "output": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "7cfdf1e7-a1f1-4486-8ac9-c83338923caf", "output": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n            \n    return (largest_negative, smallest_positive)\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "63a1418a-a4e3-45b9-bd1b-fbc9ba540a1b", "output": "def compare_one(a, b):\n    if type(a) != type(b):\n        return max(a, b)\n    \n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "72d4ed8d-cf7c-4f7d-bb35-9e0c8e0e0cf2", "output": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \n    Args:\n        n (int): The number to evaluate\n        \n    Returns:\n        bool: True if n can be written as the sum of 4 positive even numbers, False otherwise\n    \"\"\"\n    \n    if n % 2 != 0 or n <= 0:\n        return False\n    \n    for i in range(2, n//2 + 1, 2):\n        for j in range(2, n//2 + 1, 2):\n            for k in range(2, n//2 + 1, 2):\n                if i + j + k + (n - i - j - k) == n:\n                    return True\n    \n    return False\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "65b1b231-244b-4b06-93aa-a044f449c757", "output": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result\n\ndef factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "32406fb2-fe92-4a5d-91cb-fcd16e9a2ad4", "output": "def fix_spaces(text):\n    result = ''\n    num_spaces = 0\n    for char in text:\n        if char == ' ':\n            num_spaces += 1\n        else:\n            if num_spaces > 2:\n                result += '-'\n            elif num_spaces > 0:\n                result += '_' * num_spaces\n            num_spaces = 0\n            result += char\n    if num_spaces > 2:\n        result += '-'\n    elif num_spaces > 0:\n        result += '_' * num_spaces\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ed5e9166-78e7-467d-9f0a-c49a245961bd", "output": " import re\n\ndef file_name_check(file_name):\n  if re.match(r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$', file_name):\n    return 'Yes'\n  else:\n    return 'No'\n\n===", "score": 0.0, "input": null, "reference_output": null}, {"id": "37b529ce-1fa8-4cec-9139-dea69b99f58a", "output": "def sum_squares(lst):\n    sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            sum += num**2\n        elif i % 4 == 0:\n            sum += num**3\n        else:\n            sum += num\n    return sum\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "030a3272-aea4-488d-825a-cbd797f8787a", "output": " import re\n\ndef words_in_sentence(sentence):\n    words = re.findall(r'\\w+', sentence)\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "5a4a8513-45bb-41ea-b15a-c81f13070a2c", "output": " import fractions\n\ndef simplify(x, n):\n    x_num, x_den = [int(v) for v in x.split('/')]\n    n_num, n_den = [int(v) for v in n.split('/')]\n    x_frac = fractions.Fraction(x_num, x_den)\n    n_frac = fractions.Fraction(n_num, n_den)\n    product = x_frac * n_frac\n    return product.denominator == 1\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "70c067e7-3917-489b-8214-ab44e2e1e28f", "output": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "a7b7aeb0-b583-4d08-a429-d60a87fdce76", "output": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "38d622da-4955-4f77-9491-524034d61fd1", "output": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "45c3ab6b-9012-4de2-bcb7-476fcaa72af3", "output": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1) \n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "eb4d716f-5f3f-4e58-ac00-7488e9d6d5b6", "output": "def sorted_list_sum(lst):\n    lst = [w for w in lst if len(w) % 2 == 0]\n    lst.sort(key=len)\n    lst.sort()\n    return lst\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "45684c68-4f26-44a0-a4ec-9666008e6e42", "output": " import math\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False  \n    return True\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "2babcf50-740e-44a2-9e82-985990d3599d", "output": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 == 1:\n            result += num**2\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "300dc486-055a-4a80-9f1f-59354ce8374d", "output": "def compare(game, guess):\n  result = []\n  for i in range(len(game)):\n    if game[i] == guess[i]:\n      result.append(0)\n    else:\n      result.append(abs(game[i] - guess[i]))\n  return result\n\n===", "score": 0.0, "input": null, "reference_output": null}, {"id": "5cb28e9d-36bf-433e-9b82-0fed9255ff35", "output": " import re\n\ndef Strongest_Extension(class_name, extensions):\n    strengths = []\n    for ext in extensions:\n        cap = len(re.findall(r'[A-Z]', ext)) \n        sm = len(re.findall(r'[a-z]', ext))\n        strengths.append(cap - sm)\n        \n    max_strength = max(strengths) \n    max_idx = strengths.index(max_strength)\n    return class_name + \".\" + extensions[max_idx]\n\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "945c5058-1d22-4ee9-96b2-719e6fcf4684", "output": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a or b[i:]+b[:i] in a:\n            return True\n    return False\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "425fa700-74e1-4ade-95d3-6c0a4c1d4e07", "output": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    num = abs(num)\n    \n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n        \n    return (even, odd)\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "62b157f1-588a-4f77-945a-92fb7d479975", "output": "def int_to_mini_roman(number):\n    num_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'),\n               (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n\n    if not 1 <= number <= 1000:\n        raise ValueError('Number must be between 1 and 1000')\n\n    result = []\n    for arabic, roman in num_map:\n        count = number // arabic\n        result.append(roman * count)\n        number -= arabic * count\n    return ''.join(result).lower()\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "ec1d3b42-a47e-4982-8a1c-654b510568b6", "output": " import math\n\ndef right_angle_triangle(a, b, c):\n    \"\"\"\n    Check if a triangle with sides a, b, and c is a right triangle\n    using the Pythagorean theorem: a^2 + b^2 = c^2\n    \"\"\"\n    a2 = a * a\n    b2 = b * b\n    c2 = c * c\n    \n    if a2 + b2 == c2:\n        return True\n    else:\n        return False\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "8dad4294-5676-4823-a098-831226c9ead6", "output": "def find_max(words):\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            if word < max_word:\n                max_word = word\n    return max_word\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "c71166c8-40e9-45af-90a1-6dca2cc1f115", "output": "def eat(number, need, remaining):\n    eaten = number\n    to_eat = need - eaten\n    if to_eat <= remaining:\n        eaten += to_eat\n        remaining -= to_eat\n    else:\n        eaten += remaining\n        remaining = 0\n    return [eaten, remaining]\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "368f2c42-7e8b-416f-8c9f-cdc012baaf40", "output": " import operator\n\ndef do_algebra(operators, operands):\n    ops = {\n        '+': operator.add,\n        '-': operator.sub,\n        '*': operator.mul,\n        '//': operator.floordiv,\n        '**': operator.pow\n    }\n    \n    result = operands[0]\n    for op, operand in zip(operators, operands[1:]):\n        result = ops[op](result, operand)\n    return result\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "687e7d6b-1b2d-4028-9e5d-7748697648df", "output": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result\n", "score": 1.0, "input": null, "reference_output": null}, {"id": "22ef5277-1fa8-4b86-a79a-99438e303446", "output": " import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n", "score": 0.0, "input": null, "reference_output": null}, {"id": "187bfb11-3cc9-4525-a431-2055f8ec2c18", "output": "def generate_integers(a, b):\n    result = []\n    for i in range(min(a,b), max(a,b)+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n", "score": 0.0, "input": null, "reference_output": null}], "updated_at": "2023-08-15T11:26:01.063907", "created_at": "2023-08-15T11:26:01.063907", "page": null, "page_size": null, "total_pages": null, "total_count": null}